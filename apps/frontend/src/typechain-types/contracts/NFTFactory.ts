/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface NFTFactoryInterface extends utils.Interface {
  functions: {
    "addresses(uint256)": FunctionFragment;
    "collections(address)": FunctionFragment;
    "deploy(address,string,string,uint256,uint256)": FunctionFragment;
    "getOwnedCollections(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerDeploy(string,string,address,uint256,uint256)": FunctionFragment;
    "ownerOf(address)": FunctionFragment;
    "price()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "royalty()": FunctionFragment;
    "signer()": FunctionFragment;
    "transferOwner(address,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateFactory(uint256,uint256,address)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addresses"
      | "collections"
      | "deploy"
      | "getOwnedCollections"
      | "owner"
      | "ownerDeploy"
      | "ownerOf"
      | "price"
      | "renounceOwnership"
      | "royalty"
      | "signer"
      | "transferOwner"
      | "transferOwnership"
      | "updateFactory"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "collections", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deploy",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnedCollections",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerDeploy",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ownerOf", values: [string]): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "royalty", values?: undefined): string;
  encodeFunctionData(functionFragment: "signer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwner",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFactory",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addresses", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOwnedCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerDeploy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "royalty", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "signer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deployed(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface DeployedEventObject {
  addr: string;
  owner: string;
}
export type DeployedEvent = TypedEvent<[string, string], DeployedEventObject>;

export type DeployedEventFilter = TypedEventFilter<DeployedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface NFTFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addresses(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    collections(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { addr: string; owner: string }>;

    deploy(
      _owner: string,
      name: string,
      symbol: string,
      maxSupply: BigNumberish,
      txLimit: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getOwnedCollections(
      user: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerDeploy(
      name: string,
      symbol: string,
      _owner: string,
      maxSupply: BigNumberish,
      txLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ownerOf(addr: string, overrides?: CallOverrides): Promise<[string]>;

    price(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    royalty(overrides?: CallOverrides): Promise<[BigNumber]>;

    signer(overrides?: CallOverrides): Promise<[string]>;

    transferOwner(
      addr: string,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFactory(
      _price: BigNumberish,
      _royalty: BigNumberish,
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addresses(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  collections(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[string, string] & { addr: string; owner: string }>;

  deploy(
    _owner: string,
    name: string,
    symbol: string,
    maxSupply: BigNumberish,
    txLimit: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getOwnedCollections(
    user: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerDeploy(
    name: string,
    symbol: string,
    _owner: string,
    maxSupply: BigNumberish,
    txLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ownerOf(addr: string, overrides?: CallOverrides): Promise<string>;

  price(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  royalty(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwner(
    addr: string,
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFactory(
    _price: BigNumberish,
    _royalty: BigNumberish,
    _signer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addresses(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    collections(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string, string] & { addr: string; owner: string }>;

    deploy(
      _owner: string,
      name: string,
      symbol: string,
      maxSupply: BigNumberish,
      txLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getOwnedCollections(
      user: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerDeploy(
      name: string,
      symbol: string,
      _owner: string,
      maxSupply: BigNumberish,
      txLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerOf(addr: string, overrides?: CallOverrides): Promise<string>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    royalty(overrides?: CallOverrides): Promise<BigNumber>;

    signer(overrides?: CallOverrides): Promise<string>;

    transferOwner(
      addr: string,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFactory(
      _price: BigNumberish,
      _royalty: BigNumberish,
      _signer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Deployed(address,address)"(
      addr?: string | null,
      owner?: string | null
    ): DeployedEventFilter;
    Deployed(addr?: string | null, owner?: string | null): DeployedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collections(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    deploy(
      _owner: string,
      name: string,
      symbol: string,
      maxSupply: BigNumberish,
      txLimit: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getOwnedCollections(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerDeploy(
      name: string,
      symbol: string,
      _owner: string,
      maxSupply: BigNumberish,
      txLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ownerOf(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    royalty(overrides?: CallOverrides): Promise<BigNumber>;

    signer(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwner(
      addr: string,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFactory(
      _price: BigNumberish,
      _royalty: BigNumberish,
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collections(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deploy(
      _owner: string,
      name: string,
      symbol: string,
      maxSupply: BigNumberish,
      txLimit: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getOwnedCollections(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerDeploy(
      name: string,
      symbol: string,
      _owner: string,
      maxSupply: BigNumberish,
      txLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ownerOf(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    royalty(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    signer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwner(
      addr: string,
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFactory(
      _price: BigNumberish,
      _royalty: BigNumberish,
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
